# This is a basic workflow to help you get started with Actions

name:  Build and push the latest build to staging

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        uses: docker/login-action@v3.0.0
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: ${{ secrets.ACR_NAME }}
          # Username used to log against the Docker registry
          username: ${{ secrets.ACR_LOGIN }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.ACR_PASSWORD }}
          # Specifies whether the given registry is ECR (auto, true or false)
          ecr: # optional, default is auto
          # Log out from the Docker registry at the end of a job
          logout: # optional, default is true

      - name: Build and push staging images
        # You may pin to the exact commit or the version.
        # uses: cloudposse/github-action-docker-build-push@0192482637b94d39a2e76d4b01ab6f626c79e7cc
        uses: cloudposse/github-action-docker-build-push@1.13.1
        with:
          # Working directory
          workdir: . # optional, default is ./
          # Dockerfile name
          file: # optional, default is Dockerfile
          # List of build-time variables
          build-args: # optional
          # Organization
          organization: 
          # Repository
          repository: 
          # Docker registry
          registry: 
          # Sets the target stage to build
          target: # optional, default is 
          # List of target platforms for build (e.g. linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,etc)
          platforms: # optional, default is linux/amd64
          # Generate provenance attestation for the build
          provenance: # optional
          # Image name (excluding registry). Defaults to {{$organization/$repository}}.
          image_name: # optional, default is 
          # Docker login
          login: # optional, default is 
          # Docker password
          password: # optional, default is 
          # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
          cache-from: # optional, default is type=gha
          # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
          cache-to: # optional, default is type=gha,mode=max
          # List of SSH agent socket or keys to expose to the build
          ssh: # optional
          # List of tags (supports https://github.com/docker/metadata-action#tags-input)
          tags: ${{secrets.ACR_NAME}}/contoso-website:latest
          # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
          secrets: # optional
          # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
          secret-files: # optional
          # Set to `true` to tag images with the PR HEAD SHA instead of the merge commit SHA within pull requests.
          docker-metadata-pr-head-sha: # optional, default is false
